{"/home/travis/build/npmtest/node-npmtest-preprocessor/test.js":"/* istanbul instrument in package npmtest_preprocessor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-preprocessor/lib.npmtest_preprocessor.js":"/* istanbul instrument in package npmtest_preprocessor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_preprocessor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_preprocessor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-preprocessor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-preprocessor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_preprocessor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_preprocessor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_preprocessor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_preprocessor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_preprocessor.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_preprocessor.__dirname + '/lib.npmtest_preprocessor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-preprocessor/node_modules/preprocessor/Preprocessor.js":"/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license Preprocessor.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/Preprocessor.js for details\r\n */\r\n(function(global) {\r\n\r\n    /**\r\n     * Constructs a new Preprocessor.\r\n     * @exports Preprocessor\r\n     * @class Provides pre-processing of JavaScript source files, e.g. to build different versions of a library.\r\n     * @param {string} source Source to process\r\n     * @param {string|Object.<string,string>=} baseDirOrIncludes Source base directory used for includes (node.js only)\r\n     *  or an object containing all the included sources by filename. Defaults to the current working directory.\r\n     * @param {boolean} preserveLineNumbers When removing blocks of code, replace the block with blank lines so that\r\n     *  line numbers are preserved, as long as #include is not used\r\n     * @constructor\r\n     */\r\n    var Preprocessor = function Preprocessor(source, baseDirOrIncludes, preserveLineNumbers) {\r\n\r\n        /**\r\n         * Source code to pre-process.\r\n         * @type {string}\r\n         * @expose\r\n         */\r\n        this.source = \"\"+source;\r\n\r\n        /**\r\n         * Source base directory.\r\n         * @type {string}\r\n         * @expose\r\n         */\r\n        this.baseDir = typeof baseDirOrIncludes == 'string' ? baseDirOrIncludes : \".\";\r\n\r\n        /**\r\n         * Included sources by filename.\r\n         * @type {Object.<string, string>}\r\n         */\r\n        this.includes = typeof baseDirOrIncludes == 'object' ? baseDirOrIncludes : {};\r\n\r\n        /**\r\n         * Preserve line numbers when removing blocks of code\r\n         * @type {boolean}\r\n         */\r\n        this.preserveLineNumbers = typeof preserveLineNumbers == 'boolean' ? preserveLineNumbers : false;\r\n\r\n        /**\r\n         * Whether running inside of node.js or not.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        this.isNode = (typeof window == 'undefined' || !window.window) && typeof require == 'function';\r\n\r\n        /**\r\n         * Error reporting source ahead length.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.errorSourceAhead = 50;\r\n\r\n        /**\r\n         * Runtime defines.\r\n         * @type {Array.<string>}\r\n         */\r\n        this.defines = [];\r\n    };\r\n\r\n    /**\r\n     * Definition expression\r\n     * @type {!RegExp}\r\n     */\r\n    Preprocessor.EXPR = /([ ]*)\\/\\/[ ]+#(include_once|include|ifn?def|if|endif|else|elif|put|define)/g;\r\n\r\n    /**\r\n     * #include \"path/to/file\". Requires node.js' \"fs\" module.\r\n     * @type {!RegExp}\r\n     */\r\n    Preprocessor.INCLUDE = /(include_once|include)[ ]+\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"[ ]*\\r?(?:\\n|$)/g;\r\n\r\n    /**\r\n     * #ifdef/#ifndef SOMEDEFINE, #if EXPRESSION\r\n     * @type {!RegExp}\r\n     */\r\n    Preprocessor.IF = /(ifdef|ifndef|if)[ ]*([^\\r\\n]+)\\r?\\n/g;\r\n\r\n    /**\r\n     * #endif/#else, #elif EXPRESSION\r\n     * @type {!RegExp}\r\n     */\r\n    Preprocessor.ENDIF = /(endif|else|elif)([ ]+[^\\r\\n]+)?\\r?(?:\\n|$)/g;\r\n\r\n    /**\r\n     * #put EXPRESSION\r\n     * @type {!RegExp}\r\n     */\r\n    Preprocessor.PUT = /put[ ]+([^\\n]+)[ ]*/g;\r\n\r\n    /**\r\n     * #define EXPRESSION\r\n     * @type {!RegExp}\r\n     */\r\n    Preprocessor.DEFINE = /define[ ]+([^\\n]+)\\r?(?:\\n|$)/g;\r\n\r\n    /**\r\n     * @type {!RegExp}\r\n     * @inner\r\n     */\r\n    var GLOB_EXP = /(?:^|[^\\\\])\\*/;\r\n\r\n    /**\r\n     * @type {!RegExp}\r\n     * @inner\r\n     */\r\n    var NOT_LINE_ENDING = /[^\\r\\n]/g;\r\n\r\n    /**\r\n     * Strips slashes from an escaped string.\r\n     * @param {string} str Escaped string\r\n     * @return {string} Unescaped string\r\n     * @expose\r\n     */\r\n    Preprocessor.stripSlashes = function(str) {\r\n        // ref: http://phpjs.org/functions/stripslashes/\r\n        return (str + '').replace(/\\\\(.?)/g, function (s, n1) {\r\n            switch (n1) {\r\n                case '\\\\': return '\\\\';\r\n                case '0': return '\\u0000';\r\n                case '': return '';\r\n                default: return n1;\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Adds slashes to an unescaped string.\r\n     * @param {string} str Unescaped string\r\n     * @return {string} Escaped string\r\n     * @expose\r\n     */\r\n    Preprocessor.addSlashes = function(str) {\r\n        return (str+'').replace(/([\\\\\"'])/g, \"\\\\$1\").replace(/\\0/g, \"\\\\0\");\r\n    };\r\n\r\n    /**\r\n     * Indents a multi-line string.\r\n     * @param {string} str Multi-line string to indent\r\n     * @param {string} indent Indent to use\r\n     * @return {string} Indented string\r\n     * @expose\r\n     */\r\n    Preprocessor.indent = function(str, indent) {\r\n        var lines = str.split(\"\\n\");\r\n        for (var i=0; i<lines.length; i++) {\r\n            lines[i] = indent + lines[i];\r\n        }\r\n        return lines.join(\"\\n\");\r\n    };\r\n\r\n    /**\r\n     * Transforms a string for display in error messages.\r\n     * @param {string} str String to transform\r\n     * @return {string}\r\n     * @expose\r\n     */\r\n    Preprocessor.nlToStr = function(str) {\r\n        return '['+str.replace(/\\r/g, \"\").replace(/\\n/g, \"\\\\n\")+']';\r\n    };\r\n\r\n    /**\r\n     * Evaluates an expression.\r\n     * @param {object.<string,string>} runtimeDefines Runtime defines\r\n     * @param {Array.<string>|string} inlineDefines Inline defines (optional for backward compatibility)\r\n     * @param {string=} expr Expression to evaluate\r\n     * @return {*} Expression result\r\n     * @throws {Error} If the expression cannot be evaluated\r\n     * @expose\r\n     */\r\n    Preprocessor.evaluate = function(runtimeDefines, inlineDefines, expr) {\r\n        if (typeof inlineDefines === 'string') {\r\n            expr = inlineDefines;\r\n            inlineDefines = [];\r\n        }\r\n        var addSlashes = Preprocessor.addSlashes;\r\n        return (function(runtimeDefines, inlineDefines, expr) {\r\n            for (var key in runtimeDefines) {\r\n                if (runtimeDefines.hasOwnProperty(key)) {\r\n                    eval(\"var \"+key+\" = \\\"\"+addSlashes(\"\"+runtimeDefines[key])+\"\\\";\");\r\n                }\r\n            }\r\n            for (var i=0; i<inlineDefines.length; i++) {\r\n                var def = inlineDefines[i];\r\n                if (def.substring(0,9) != 'function ' && def.substring(0,4) != 'var ') {\r\n                    def = \"var \"+def; // Enforce local\r\n                }\r\n                eval(def);\r\n            }\r\n            return eval(expr);\r\n        }).bind(null)(runtimeDefines, inlineDefines, expr);\r\n    };\r\n\r\n    /**\r\n     * Preprocesses.\r\n     * @param {object.<string,string>} defines Defines\r\n     * @param {function(string)=} verbose Print verbose processing information to the specified function as the first parameter. Defaults to not print debug information.\r\n     * @return {string} Processed source\r\n     * @throws {Error} If the source cannot be pre-processed\r\n     * @expose\r\n     */\r\n    Preprocessor.prototype.process = function(defines, verbose) {\r\n        defines = defines || {};\r\n        verbose = typeof verbose == 'function' ? verbose : function() {};\r\n        verbose(\"Defines: \"+JSON.stringify(defines));\r\n\r\n        var match, match2, include, p, stack = [];\r\n        while ((match = Preprocessor.EXPR.exec(this.source)) !== null) {\r\n            verbose(match[2]+\" @ \"+match.index+\"-\"+Preprocessor.EXPR.lastIndex);\r\n            var indent = match[1];\r\n            switch (match[2]) {\r\n                case 'include_once':\r\n                case 'include':\r\n                    Preprocessor.INCLUDE.lastIndex = match.index;\r\n                    if ((match2 = Preprocessor.INCLUDE.exec(this.source)) === null) {\r\n                        throw(new Error(\"Illegal #\"+match[2]+\": \"+this.source.substring(match.index, match.index+this.errorSourceAhead)+\"...\"));\r\n                    }\r\n                    include = Preprocessor.stripSlashes(match2[2]);\r\n                    if (typeof this.includes[include] !== 'undefined') { // Do we already know it?\r\n                        if (match2[1] === \"include_once\") {\r\n                            verbose(\"  skip incl: \"+include);\r\n                            include = \"\";\r\n                        } else {\r\n                            verbose(\"  incl: \"+include);\r\n                            include = this.includes[include];\r\n                        }\r\n                    } else { // Load it if in node.js...\r\n                        if (!this.isNode) {\r\n                            throw(new Error(\"Failed to resolve include: \"+this.baseDir+\"/\"+include));\r\n                        }\r\n                        try {\r\n                            var key = include,\r\n                                fs = require(\"fs\");\r\n                            if (GLOB_EXP.test(include)) {\r\n                                var glob = require(\"glob\");\r\n                                verbose('  glob incl: '+this.baseDir+\"/\"+include);\r\n                                var _this = this;\r\n                                glob(this.baseDir+\"/\"+include, {\"sync\": true}, function(err, files) {\r\n                                    if (err) throw(err);\r\n                                    include = '';\r\n                                    for (var i=0; i<files.length; i++) {\r\n                                        verbose('  incl: '+files[i]);\r\n                                        var contents = fs.readFileSync(files[i])+\"\";\r\n                                        _this.includes[key] = contents;\r\n                                        include += contents;\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                verbose('  incl: '+include);\r\n                                include = fs.readFileSync(this.baseDir+\"/\"+include)+\"\";\r\n                                this.includes[key] = include;\r\n                            }\r\n                        } catch (e) {\r\n                            throw(new Error(\"Include failed: \"+include+\" (\"+e+\")\"));\r\n                        }\r\n                    }\r\n                    this.source = this.source.substring(0, match.index)+Preprocessor.indent(include, indent)+this.source.substring(Preprocessor.INCLUDE.lastIndex);\r\n                    Preprocessor.EXPR.lastIndex = stack.length > 0 ? stack[stack.length-1].lastIndex : 0; // Start over again\r\n                    verbose(\"  continue at \"+Preprocessor.EXPR.lastIndex);\r\n                    break;\r\n                case 'put':\r\n                    Preprocessor.PUT.lastIndex = match.index;\r\n                    if ((match2 = Preprocessor.PUT.exec(this.source)) === null) {\r\n                        throw(new Error(\"Illegal #\"+match[2]+\": \"+this.source.substring(match.index, match.index+this.errorSourceAhead)+\"...\"));\r\n                    }\r\n                    include = match2[1];\r\n                    verbose(\"  expr: \"+match2[1]);\r\n                    include = Preprocessor.evaluate(defines, this.defines, match2[1]);\r\n                    verbose(\"  value: \"+Preprocessor.nlToStr(include));\r\n                    this.source = this.source.substring(0, match.index)+indent+include+this.source.substring(Preprocessor.PUT.lastIndex);\r\n                    Preprocessor.EXPR.lastIndex = match.index + include.length;\r\n                    verbose(\"  continue at \"+Preprocessor.EXPR.lastIndex);\r\n                    break;\r\n                case 'ifdef':\r\n                case 'ifndef':\r\n                case 'if':\r\n                    Preprocessor.IF.lastIndex = match.index;\r\n                    if ((match2 = Preprocessor.IF.exec(this.source)) === null) {\r\n                        throw(new Error(\"Illegal #\"+match[2]+\": \"+this.source.substring(match.index, match.index+this.errorSourceAhead)+\"...\"));\r\n                    }\r\n                    verbose(\"  test: \"+match2[2]);\r\n                    if (match2[1] == \"ifdef\") {\r\n                        include = !!defines[match2[2]];\r\n                    } else if (match2[1] == \"ifndef\") {\r\n                        include = !defines[match2[2]];\r\n                    } else {\r\n                        include = Preprocessor.evaluate(defines, this.defines, match2[2]);\r\n                    }\r\n                    verbose(\"  value: \"+include);\r\n                    stack.push(p={\r\n                        \"include\": include,\r\n                        \"index\": match.index,\r\n                        \"lastIndex\": Preprocessor.IF.lastIndex\r\n                    });\r\n                    verbose(\"  push: \"+JSON.stringify(p));\r\n                    break;\r\n                case 'endif':\r\n                case 'else':\r\n                case 'elif':\r\n                    Preprocessor.ENDIF.lastIndex = match.index;\r\n                    if ((match2 = Preprocessor.ENDIF.exec(this.source)) === null) {\r\n                        throw(new Error(\"Illegal #\"+match[2]+\": \"+this.source.substring(match.index, match.index+this.errorSourceAhead)+\"...\"));\r\n                    }\r\n                    if (stack.length == 0) {\r\n                        throw(new Error(\"Unexpected #\"+match2[1]+\": \"+this.source.substring(match.index, match.index+this.errorSourceAhead)+\"...\"));\r\n                    }\r\n                    var before = stack.pop();\r\n                    verbose(\"  pop: \"+JSON.stringify(before));\r\n\r\n                    if (this.preserveLineNumbers) {\r\n                        include = this.source.substring(before[\"index\"], before[\"lastIndex\"]).replace(NOT_LINE_ENDING, \"\")+\r\n                            this.source.substring(before[\"lastIndex\"], match.index)+\r\n                            this.source.substring(match.index, Preprocessor.ENDIF.lastIndex).replace(NOT_LINE_ENDING, \"\");\r\n                    } else {\r\n                        include = this.source.substring(before[\"lastIndex\"], match.index);\r\n                    }\r\n\r\n                    if (before[\"include\"]) {\r\n                        verbose(\"  incl: \"+Preprocessor.nlToStr(include)+\", 0-\"+before['index']+\" + \"+include.length+\" bytes + \"+Preprocessor.ENDIF.lastIndex+\"-\"+this.source.length);\r\n                        this.source = this.source.substring(0, before[\"index\"])+include+this.source.substring(Preprocessor.ENDIF.lastIndex);\r\n                    } else if (this.preserveLineNumbers) {\r\n                        verbose(\"  excl(\\\\n): \"+Preprocessor.nlToStr(include)+\", 0-\"+before['index']+\" + \"+Preprocessor.ENDIF.lastIndex+\"-\"+this.source.length);\r\n                        include = include.replace(NOT_LINE_ENDING, \"\");\r\n                        this.source = this.source.substring(0, before[\"index\"])+include+this.source.substring(Preprocessor.ENDIF.lastIndex);\r\n                    } else {\r\n                        verbose(\"  excl: \"+Preprocessor.nlToStr(include)+\", 0-\"+before['index']+\" + \"+Preprocessor.ENDIF.lastIndex+\"-\"+this.source.length);\r\n                        include = \"\";\r\n                        this.source = this.source.substring(0, before[\"index\"])+this.source.substring(Preprocessor.ENDIF.lastIndex);\r\n                    }\r\n                    if (this.source == \"\") {\r\n                        verbose(\"  result empty\");\r\n                    }\r\n                    Preprocessor.EXPR.lastIndex = before[\"index\"]+include.length;\r\n                    verbose(\"  continue at \"+Preprocessor.EXPR.lastIndex);\r\n                    if (match2[1] == \"else\" || match2[1] == \"elif\") {\r\n                        if (match2[1] == 'else') {\r\n                            include = !before[\"include\"];\r\n                        } else {\r\n                            include = Preprocessor.evaluate(defines, this.defines, match2[2]);\r\n                        }\r\n                        stack.push(p={\r\n                            \"include\": !before[\"include\"],\r\n                            \"index\": Preprocessor.EXPR.lastIndex,\r\n                            \"lastIndex\": Preprocessor.EXPR.lastIndex\r\n                        });\r\n                        verbose(\"  push: \"+JSON.stringify(p));\r\n                    }\r\n                    break;\r\n                case 'define':\r\n                    // https://github.com/dcodeIO/Preprocessor.js/issues/5\r\n                    Preprocessor.DEFINE.lastIndex = match.index;\r\n                    if ((match2 = Preprocessor.DEFINE.exec(this.source)) === null) {\r\n                        throw(new Error(\"Illegal #\"+match[2]+\": \"+this.source.substring(match.index, match.index+this.errorSourceAhead)+\"...\"));\r\n                    }\r\n                    var define = match2[1];\r\n                    verbose(\"  def: \"+match2[1]);\r\n                    this.defines.push(define);\r\n                    var lineEnding = \"\"\r\n                    if (this.preserveLineNumbers) {\r\n                        lineEnding = this.source.substring(match.index, Preprocessor.DEFINE.lastIndex).replace(NOT_LINE_ENDING, \"\");\r\n                    }\r\n                    this.source = this.source.substring(0, match.index)+indent+lineEnding+this.source.substring(Preprocessor.DEFINE.lastIndex);\r\n                    Preprocessor.EXPR.lastIndex = match.index;\r\n                    verbose(\"  continue at \"+Preprocessor.EXPR.lastIndex);\r\n            }\r\n        }\r\n        if (stack.length > 0) {\r\n            before = stack.pop();\r\n            verbose(\"Still on stack: \"+JSON.stringify(before));\r\n        }\r\n        return this.source;\r\n    };\r\n\r\n    /**\r\n     * Returns a string representation of this object.\r\n     * @return {string} String representation as of \"Preprocessor\"\r\n     * @expose\r\n     */\r\n    Preprocessor.prototype.toString = function() {\r\n        return \"Preprocessor\";\r\n    };\r\n\r\n    // Enable module loading if available\r\n    if (typeof module != 'undefined' && module[\"exports\"]) { // CommonJS\r\n        module[\"exports\"] = Preprocessor;\r\n    } else if (typeof define != 'undefined' && define[\"amd\"]) { // AMD\r\n        define(\"Preprocessor\", [], function() { return Preprocessor; });\r\n    } else { // Shim\r\n        if (!global[\"dcodeIO\"]) {\r\n            global[\"dcodeIO\"] = {};\r\n        }\r\n        global[\"dcodeIO\"][\"Preprocessor\"] = Preprocessor;\r\n    }\r\n\r\n})(this);\r\n","/home/travis/build/npmtest/node-npmtest-preprocessor/node_modules/preprocessor/externs/fs.js":"/*\r\n * Copyright 2012 The Closure Compiler Authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Definitions for node's \"fs\" module.\r\n * @see http://nodejs.org/api/fs.html\r\n * @externs\r\n * @author Daniel Wirtz <dcode@dcode.io>\r\n */\r\n\r\n/**\r\n BEGIN_NODE_INCLUDE\r\n var fs = require('fs');\r\n END_NODE_INCLUDE\r\n */\r\n\r\nvar fs = {};\r\n\r\n/**\r\n * @param {string} oldPath\r\n * @param {string} newPath\r\n * @param {function(...)=} callback\r\n */\r\nfs.rename = function(oldPath, newPath, callback) {};\r\n\r\n/**\r\n * @param {string} oldPath\r\n * @param {string} newPath\r\n */\r\nfs.renameSync = function(oldPath, newPath) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} len\r\n * @param {function(...)=} callback\r\n */\r\nfs.truncate = function(fd, len, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} len\r\n */\r\nfs.truncateSync = function(fd, len) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {function(...)=} callback\r\n */\r\nfs.chown = function(path, uid, gid, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n */\r\nfs.chownSync = function(path, uid, gid) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {function(...)=} callback\r\n */\r\nfs.fchown = function(fd, uid, gid, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} uid\r\n * @param {number} gid\r\n */\r\nfs.fchownSync = function(fd, uid, gid) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {function(...)=} callback\r\n */\r\nfs.lchown = function(path, uid, gid, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n */\r\nfs.lchownSync = function(path, uid, gid) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} mode\r\n * @param {function(...)=} callback\r\n */\r\nfs.chmod = function(path, mode, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} mode\r\n */\r\nfs.chmodSync = function(path, mode) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} mode\r\n * @param {function(...)=} callback\r\n */\r\nfs.fchmod = function(fd, mode, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} mode\r\n */\r\nfs.fchmodSync = function(fd, mode) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} mode\r\n * @param {function(...)=} callback\r\n */\r\nfs.lchmod = function(path, mode, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} mode\r\n */\r\nfs.lchmodSync = function(path, mode) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(string, fs.Stats)=} callback\r\n * @nosideeffects\r\n */\r\nfs.stat = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @return {fs.Stats}\r\n * @nosideeffects\r\n */\r\nfs.statSync = function(path) {}\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {function(string, fs.Stats)=} callback\r\n * @nosideeffects\r\n */\r\nfs.fstat = function(fd, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @return {fs.Stats}\r\n * @nosideeffects\r\n */\r\nfs.fstatSync = function(fd) {}\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(string, fs.Stats)=} callback\r\n * @nosideeffects\r\n */\r\nfs.lstat = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @return {fs.Stats}\r\n * @nosideeffects\r\n */\r\nfs.lstatSync = function(path) {}\r\n\r\n/**\r\n * @param {string} srcpath\r\n * @param {string} dstpath\r\n * @param {function(...)=} callback\r\n */\r\nfs.link = function(srcpath, dstpath, callback) {};\r\n\r\n/**\r\n * @param {string} srcpath\r\n * @param {string} dstpath\r\n */\r\nfs.linkSync = function(srcpath, dstpath) {};\r\n\r\n/**\r\n * @param {string} srcpath\r\n * @param {string} dstpath\r\n * @param {string=} type\r\n * @param {function(...)=} callback\r\n */\r\nfs.symlink = function(srcpath, dstpath, type, callback) {};\r\n\r\n/**\r\n * @param {string} srcpath\r\n * @param {string} dstpath\r\n * @param {string=} type\r\n */\r\nfs.symlinkSync = function(srcpath, dstpath, type) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(string, string)=} callback\r\n * @nosideeffects\r\n */\r\nfs.readlink = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @return {string}\r\n * @nosideeffects\r\n */\r\nfs.readlinkSync = function(path) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {object.<string,string>=|function(string, string)=} cache\r\n * @param {function(string, string)=} callback\r\n * @nosideeffects\r\n */\r\nfs.realpath = function(path, cache, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {object.<string,string>=} cache\r\n * @return {string}\r\n * @nosideeffects\r\n */\r\nfs.realpathSync = function(path, cache) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(...)=} callback\r\n */\r\nfs.unlink = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n */\r\nfs.unlinkSync = function(path) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(...)=} callback\r\n */\r\nfs.rmdir = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n */\r\nfs.rmdirSync = function(path) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number=} mode\r\n * @param {function(...)=} callback\r\n */\r\nfs.mkdir = function(path, mode, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number=} mode\r\n */\r\nfs.mkdirSync = function(path, mode) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(string,array.<string>)=} callback\r\n * @nosideeffects\r\n */\r\nfs.readdir = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @return {array.<string>}\r\n * @nosideeffects\r\n */\r\nfs.readdirSync = function(path) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {function(...)=} callback\r\n */\r\nfs.close = function(fd, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n */\r\nfs.closeSync = function(fd) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {string} flags\r\n * @param {number=} mode\r\n * @param {function(string, *)=} callback\r\n * @nosideeffects\r\n */\r\nfs.open = function(path, flags, mode, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {string} flags\r\n * @param {number=} mode\r\n * @return {*}\r\n * @nosideeffects\r\n */\r\nfs.openSync = function(path, flags, mode) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} atime\r\n * @param {number} mtime\r\n * @param {function(...)=} callback\r\n * @nosideeffects\r\n */\r\nfs.utimes = function(path, atime, mtime, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} atime\r\n * @param {number} mtime\r\n * @nosideeffects\r\n */\r\nfs.utimesSync = function(path, atime, mtime) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} atime\r\n * @param {number} mtime\r\n * @param {function(...)=} callback\r\n * @nosideeffects\r\n */\r\nfs.futimes = function(fd, atime, mtime, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} atime\r\n * @param {number} mtime\r\n * @nosideeffects\r\n */\r\nfs.futimesSync = function(fd, atime, mtime) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {function(...)=} callback\r\n */\r\nfs.fsync = function(fd, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n */\r\nfs.fsyncSync = function(fd) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {*} buffer\r\n * @param {number} offset\r\n * @param {number} length\r\n * @param {number} position\r\n * @param {function(string, number, *)=} callback\r\n */\r\nfs.write = function(fd, buffer, offset, length, position, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {*} buffer\r\n * @param {number} offset\r\n * @param {number} length\r\n * @param {number} position\r\n * @return {number}\r\n */\r\nfs.writeSync = function(fd, buffer, offset, length, position) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {*} buffer\r\n * @param {number} offset\r\n * @param {number} length\r\n * @param {number} position\r\n * @param {function(string, number, *)=} callback\r\n * @nosideeffects\r\n */\r\nfs.read = function(fd, buffer, offset, length, position, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {*} buffer\r\n * @param {number} offset\r\n * @param {number} length\r\n * @param {number} position\r\n * @return {number}\r\n * @nosideeffects\r\n */\r\nfs.readSync = function(fd, buffer, offset, length, position) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {string=|function(string, *)=}encoding\r\n * @param {function(string, *)=} callback\r\n * @nosideeffects\r\n */\r\nfs.readFile = function(filename, encoding, callback) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {string=} encoding\r\n * @nosideeffects\r\n */\r\nfs.readFileSync = function(filename, encoding) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {*} data\r\n * @param {string=|function(string)=} encoding\r\n * @param {function(string)=} callback\r\n */\r\nfs.writeFile = function(filename, data, encoding, callback) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {*} data\r\n * @param {string=} encoding\r\n */\r\nfs.writeFileSync = function(filename, data, encoding) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {*} data\r\n * @param {string=|function(string)=} encoding\r\n * @param {function(string)=} callback\r\n */\r\nfs.appendFile = function(filename, data, encoding, callback) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {*} data\r\n * @param {string=|function(string)=} encoding\r\n */\r\nfs.appendFileSync = function(filename, data, encoding) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {{persistent: boolean, interval: number}=|function(*,*)} options\r\n * @param {function(*,*)=} listener\r\n */\r\nfs.watchFile = function(filename, options, listener) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {function=} listener\r\n */\r\nfs.unwatchFile = function(filename, listener) {};\r\n\r\n/**\r\n * \r\n * @param {string} filename\r\n * @param {{persistent: boolean}=|function(string, string)} options\r\n * @param {function(string, string)=} listener\r\n * @return {fs.FSWatcher}\r\n */\r\nfs.watch = function(filename, options, listener) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(boolean)} callback\r\n * @nosideeffects\r\n */\r\nfs.exists = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @nosideeffects\r\n */\r\nfs.existsSync = function(path) {};\r\n\r\n/**\r\n * @constructor\r\n */\r\nfs.Stats = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isFile = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isDirectory = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isBlockDevice = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isCharacterDevice = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isSymbolicLink = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isFIFO = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isSocket = function() {};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.dev = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.ino = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.mode = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.nlink = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.uid = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.gid = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.rdev = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.size = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.blkSize = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.blocks = 0;\r\n\r\n/**\r\n * @type {Date}\r\n */\r\nfs.Stats.prototype.atime = 0;\r\n\r\n/**\r\n * @type {Date}\r\n */\r\nfs.Stats.prototype.mtime = 0;\r\n\r\n/**\r\n * @type {Date}\r\n */\r\nfs.Stats.prototype.ctime = 0;\r\n\r\n/**\r\n * @param {string} path\r\n * @param {{flags: string, encoding: ?string, fd: *, mode: number, bufferSize: number}=} options\r\n * @nosideeffects\r\n */\r\nfs.createReadStream = function(path, options) {};\r\n\r\n/**\r\n * @constructor\r\n * @extends {stream.ReadableStream}\r\n */\r\nfs.ReadStream = function() {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {{flags: string, encoding: ?string, mode: number}=} options\r\n * @nosideeffects\r\n */\r\nfs.createWriteStream = function(path, options) {};\r\n\r\n/**\r\n * @constructor\r\n * @extends {stream.WritableStream}\r\n */\r\nfs.WriteStream = function() {};\r\n\r\n/**\r\n * @param {string} event\r\n * @param {function(...)} callback\r\n */\r\nfs.WriteStream.prototype.on = function(event, callback) {};\r\n\r\n/**\r\n * @constructor\r\n */\r\nfs.FSWatcher = function() {};\r\n\r\n/**\r\n */\r\nfs.FSWatcher.prototype.close = function() {};\r\n\r\n/**\r\n * @param {string} event\r\n * @param {function(...)} callback\r\n */\r\nfs.FSWatcher.prototype.on = function(event, callback) {};\r\n"}